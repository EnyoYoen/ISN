from enum import Enum

import matplotlib.pyplot as plt
import numpy as np

from Perlin import Perlin


class Biomes(Enum):
    LAVA = 1
    VOLCANO = 2
    PLAIN = 3
    MUSHROOM_FOREST = 4
    DESOLATED_FOREST = 5
    SNOW = 6


class Map:
    __slots__ = ["perlin", "map_chunks", "area_size", "x_chunk", "y_chunk"]

    def __init__(self, seed = 1) -> None:
        self.perlin = Perlin(seed, 4, 2, 2, 100, 1)
        self.map_chunks = {}
        self.area_size = 3 # The size (in chunks) of the area generated by get_area_around_chunk
        self.x_chunk = 0 # TODO : initialize with saved data (if it exists)
        self.y_chunk = 0
    
    def change_chunk_coords(self, x, y):
        self.x_chunk = x
        self.y_chunk = y

    def process_chunk(self, chunk_data, min_height, max_height):
        processed_chunk = np.empty((Perlin.CHUNK_SIZE, Perlin.CHUNK_SIZE))
        for i in range(Perlin.CHUNK_SIZE):
            for j in range(Perlin.CHUNK_SIZE):
                normalized_height = chunk_data[i][j]#(chunk_data[i][j] - min_height) / (max_height - min_height)
                if normalized_height > 3.5:
                    processed_chunk[i][j] = Biomes.SNOW.value
                elif normalized_height > 2:
                    processed_chunk[i][j] = Biomes.DESOLATED_FOREST.value
                elif normalized_height > 1:
                    processed_chunk[i][j] = Biomes.MUSHROOM_FOREST.value
                elif normalized_height > -2:
                    processed_chunk[i][j] = Biomes.PLAIN.value
                elif normalized_height > -3:
                    processed_chunk[i][j] = Biomes.VOLCANO.value
                else:
                    processed_chunk[i][j] = Biomes.LAVA.value
        return processed_chunk

    def get_area_around_chunk(self):
        # Get an area of <area_size> x <area_size> chunks around the current chunk, concatenated into one 2D array
        rows = []
        chunks = []
        for i in range(self.area_size * self.area_size):
            chunk = self.perlin.get_chunk(self.x_chunk + i // self.area_size - 1, self.y_chunk + i % self.area_size - 1)
            chunks.append(self.process_chunk(chunk[0], chunk[1], chunk[2]))
            if i % self.area_size == self.area_size - 1:
                rows.append(np.concatenate(chunks, axis = 1))
                chunks.clear()
        
        return np.concatenate(rows, axis = 0)

if __name__ == "__main__":
    map = Map(1)
    area = map.get_area_around_chunk()
    print(area.shape)
    fig, ax = plt.subplots()
    ax.imshow(area)
    plt.show()